{"ast":null,"code":"var types = {\n  password: {\n    regex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n    error: \"Password needs to be 8 characters long at contain: 1 uppercase letter, 1 lower case letter, 1 number and 1 special character.\"\n  },\n  date: {\n    regex: /^(19|20)?[0-9]{2}([- /.](0?[1-9]|1[012])[- /.])(0?[1-9]|[12][0-9]|3[01])*$/,\n    error: \"Date needs to be in format: dd.mm.yyyy.\"\n  },\n  number: {\n    regex: /^\\d*$/,\n    error: \"Number must only contain numbers.\"\n  }\n};\n\nvar inputValidator = (value, type, required, min, max) => {\n  var result;\n\n  if ((value === undefined || value.trim() === \"\") && required) {\n    result = {\n      error: \"Required.\"\n    };\n  } else if ((value === undefined || value.trim() === \"\") && !required) {\n    return true;\n  } else {\n    if (type === \"text\") {\n      if (min && max) {\n        result = new RegExp(\"^.{\".concat(min, \",\").concat(max, \"$\")).test(value.trim()) ? true : {\n          error: \"Input needs to be from \".concat(min, \" to \").concat(max, \" characters long.\")\n        };\n      } else if (min) {\n        result = new RegExp(\"^.{\".concat(min, \",}$\")).test(value.trim()) ? true : {\n          error: \"Input needs to be at least \".concat(min, \" characters long.\")\n        };\n      } else if (max) {\n        result = new RegExp(\"^.{0,\".concat(max, \"}$\")).test(value.trim()) ? true : {\n          error: \"Input needs to be no longer than \".concat(max, \" characters.\")\n        };\n      } else {\n        result = /^.+$/.test(value.trim());\n      }\n    } else {\n      result = types[type].regex.test(value) ? true : {\n        error: types[type].error\n      };\n    }\n  }\n\n  return result;\n};\n\nexport default inputValidator;","map":{"version":3,"sources":["C:/Users/Oleh Dzenhliuk/Downloads/form-forked/src/helpers/inputValidator.js"],"names":["types","password","regex","error","date","number","inputValidator","value","type","required","min","max","result","undefined","trim","RegExp","test"],"mappings":"AAAA,IAAMA,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAE,6DADD;AAENC,IAAAA,KAAK,EACD;AAHE,GADA;AAMVC,EAAAA,IAAI,EAAE;AACFF,IAAAA,KAAK,EAAE,4EADL;AAEFC,IAAAA,KAAK,EACD;AAHF,GANI;AAWVE,EAAAA,MAAM,EAAE;AACJH,IAAAA,KAAK,EAAE,OADH;AAEJC,IAAAA,KAAK,EAAE;AAFH;AAXE,CAAd;;AAiBA,IAAMG,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAAwBC,GAAxB,EAA6BC,GAA7B,KAAqC;AACxD,MAAIC,MAAJ;;AACA,MAAI,CAACL,KAAK,KAAKM,SAAV,IAAuBN,KAAK,CAACO,IAAN,OAAiB,EAAzC,KAAgDL,QAApD,EAA+D;AAC3DG,IAAAA,MAAM,GAAG;AAACT,MAAAA,KAAK,EAAE;AAAR,KAAT;AACH,GAFD,MAEO,IAAI,CAACI,KAAK,KAAKM,SAAV,IAAuBN,KAAK,CAACO,IAAN,OAAiB,EAAzC,KAAgD,CAACL,QAArD,EAA+D;AAClE,WAAO,IAAP;AACH,GAFM,MAEA;AACH,QAAID,IAAI,KAAK,MAAb,EAAqB;AACjB,UAAIE,GAAG,IAAIC,GAAX,EAAgB;AACZC,QAAAA,MAAM,GAAG,IAAIG,MAAJ,cAAiBL,GAAjB,cAAwBC,GAAxB,QAAgCK,IAAhC,CAAqCT,KAAK,CAACO,IAAN,EAArC,IAAqD,IAArD,GAA4D;AAACX,UAAAA,KAAK,mCAA4BO,GAA5B,iBAAsCC,GAAtC;AAAN,SAArE;AACH,OAFD,MAEO,IAAID,GAAJ,EAAS;AACZE,QAAAA,MAAM,GAAG,IAAIG,MAAJ,cAAiBL,GAAjB,UAA2BM,IAA3B,CAAgCT,KAAK,CAACO,IAAN,EAAhC,IAAgD,IAAhD,GAAuD;AAACX,UAAAA,KAAK,uCAAgCO,GAAhC;AAAN,SAAhE;AACH,OAFM,MAEA,IAAIC,GAAJ,EAAS;AACZC,QAAAA,MAAM,GAAG,IAAIG,MAAJ,gBAAmBJ,GAAnB,SAA4BK,IAA5B,CAAiCT,KAAK,CAACO,IAAN,EAAjC,IAAiD,IAAjD,GAAwD;AAACX,UAAAA,KAAK,6CAAsCQ,GAAtC;AAAN,SAAjE;AACH,OAFM,MAEA;AACHC,QAAAA,MAAM,GAAG,OAAOI,IAAP,CAAYT,KAAK,CAACO,IAAN,EAAZ,CAAT;AACH;AACJ,KAVD,MAUO;AACHF,MAAAA,MAAM,GAAGZ,KAAK,CAACQ,IAAD,CAAL,CAAYN,KAAZ,CAAkBc,IAAlB,CAAuBT,KAAvB,IAAgC,IAAhC,GAAuC;AAACJ,QAAAA,KAAK,EAAEH,KAAK,CAACQ,IAAD,CAAL,CAAYL;AAApB,OAAhD;AACH;AACJ;;AACD,SAAOS,MAAP;AACH,CAtBD;;AAwBA,eAAeN,cAAf","sourcesContent":["const types = {\n    password: {\n        regex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n        error:\n            \"Password needs to be 8 characters long at contain: 1 uppercase letter, 1 lower case letter, 1 number and 1 special character.\",\n    },\n    date: {\n        regex: /^(19|20)?[0-9]{2}([- /.](0?[1-9]|1[012])[- /.])(0?[1-9]|[12][0-9]|3[01])*$/,\n        error:\n            \"Date needs to be in format: dd.mm.yyyy.\",\n    },\n    number: {\n        regex: /^\\d*$/,\n        error: \"Number must only contain numbers.\"\n    }\n};\n\nconst inputValidator = (value, type, required, min, max) => {\n    let result;\n    if ((value === undefined || value.trim() === \"\") && required ) {\n        result = {error: \"Required.\"};\n    } else if ((value === undefined || value.trim() === \"\") && !required) {\n        return true;\n    } else {\n        if (type === \"text\") {\n            if (min && max) {\n                result = new RegExp(`^.{${min},${max}$`).test(value.trim()) ? true : {error: `Input needs to be from ${min} to ${max} characters long.`};\n            } else if (min) {\n                result = new RegExp(`^.{${min},}$`).test(value.trim()) ? true : {error: `Input needs to be at least ${min} characters long.`};\n            } else if (max) {\n                result = new RegExp(`^.{0,${max}}$`).test(value.trim()) ? true : {error: `Input needs to be no longer than ${max} characters.`};\n            } else {\n                result = /^.+$/.test(value.trim());\n            }\n        } else {\n            result = types[type].regex.test(value) ? true : {error: types[type].error};\n        }\n    }\n    return result;\n};\n\nexport default inputValidator;\n"]},"metadata":{},"sourceType":"module"}