{"ast":null,"code":"var types = {\n  password: {\n    regex: new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"),\n    error: \"Password needs to be 8 characters long at contain: 1 uppercase letter, 1 lower case letter, 1 number and 1 special character.\"\n  },\n  date: {\n    regex: new RegExp(\"^(0[1-9]|1d|2d|3[01])/(0[1-9]|1[0-2])/(19|20)d{2}$\"),\n    error: \"Date needs to be in format: dd/mm/yyyy.\"\n  },\n  number: {\n    regex: new RegExp(\"^d*$\"),\n    error: \"Number must only contain numbers.\"\n  }\n};\n\nvar inputValidator = (value, type, min, max) => {\n  var result;\n\n  if (type === \"text\") {\n    if (min & max) {\n      result = /^.{min,max}$/.test(value.trim());\n    } else if (min) {\n      result = /^.{min,}$/.test(value.trim());\n    } else if (max) {\n      result = /^.{0,max}$/.test(value.trim());\n    } else {\n      result = /^.+$/.test(value.trim());\n    }\n  } else {\n    result = types[type].regex.test(value) ? true : {\n      error: types[type].error\n    };\n  }\n\n  return result;\n};\n\nexport default inputValidator;","map":{"version":3,"sources":["C:/Users/Oleh Dzenhliuk/Downloads/form-forked/src/helpers/inputValidator.js"],"names":["types","password","regex","RegExp","error","date","number","inputValidator","value","type","min","max","result","test","trim"],"mappings":"AAAA,IAAMA,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAE,IAAIC,MAAJ,CACH,6DADG,CADD;AAINC,IAAAA,KAAK,EACD;AALE,GADA;AAQVC,EAAAA,IAAI,EAAE;AACFH,IAAAA,KAAK,EAAE,IAAIC,MAAJ,CACH,oDADG,CADL;AAIFC,IAAAA,KAAK,EACD;AALF,GARI;AAeVE,EAAAA,MAAM,EAAE;AACJJ,IAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAW,MAAX,CADH;AAEJC,IAAAA,KAAK,EAAE;AAFH;AAfE,CAAd;;AAqBA,IAAMG,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,KAA2B;AAC9C,MAAIC,MAAJ;;AACA,MAAIH,IAAI,KAAK,MAAb,EAAqB;AACjB,QAAIC,GAAG,GAAGC,GAAV,EAAe;AACXC,MAAAA,MAAM,GAAG,eAAeC,IAAf,CAAoBL,KAAK,CAACM,IAAN,EAApB,CAAT;AACH,KAFD,MAEO,IAAIJ,GAAJ,EAAS;AACZE,MAAAA,MAAM,GAAG,YAAYC,IAAZ,CAAiBL,KAAK,CAACM,IAAN,EAAjB,CAAT;AACH,KAFM,MAEA,IAAIH,GAAJ,EAAS;AACZC,MAAAA,MAAM,GAAG,aAAaC,IAAb,CAAkBL,KAAK,CAACM,IAAN,EAAlB,CAAT;AACH,KAFM,MAEA;AACHF,MAAAA,MAAM,GAAG,OAAOC,IAAP,CAAYL,KAAK,CAACM,IAAN,EAAZ,CAAT;AACH;AACJ,GAVD,MAUO;AACHF,IAAAA,MAAM,GAAGZ,KAAK,CAACS,IAAD,CAAL,CAAYP,KAAZ,CAAkBW,IAAlB,CAAuBL,KAAvB,IAAgC,IAAhC,GAAuC;AAACJ,MAAAA,KAAK,EAAEJ,KAAK,CAACS,IAAD,CAAL,CAAYL;AAApB,KAAhD;AACH;;AACD,SAAOQ,MAAP;AACH,CAhBD;;AAkBA,eAAeL,cAAf","sourcesContent":["const types = {\n    password: {\n        regex: new RegExp(\n            \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"\n        ),\n        error:\n            \"Password needs to be 8 characters long at contain: 1 uppercase letter, 1 lower case letter, 1 number and 1 special character.\",\n    },\n    date: {\n        regex: new RegExp(\n            \"^(0[1-9]|1d|2d|3[01])/(0[1-9]|1[0-2])/(19|20)d{2}$\"\n        ),\n        error:\n            \"Date needs to be in format: dd/mm/yyyy.\",\n    },\n    number: {\n        regex: new RegExp(\"^d*$\"),\n        error: \"Number must only contain numbers.\"\n    }\n};\n\nconst inputValidator = (value, type, min, max) => {\n    let result;\n    if (type === \"text\") {\n        if (min & max) {\n            result = /^.{min,max}$/.test(value.trim());\n        } else if (min) {\n            result = /^.{min,}$/.test(value.trim());\n        } else if (max) {\n            result = /^.{0,max}$/.test(value.trim());\n        } else {\n            result = /^.+$/.test(value.trim());\n        }\n    } else {\n        result = types[type].regex.test(value) ? true : {error: types[type].error};\n    }\n    return result;\n};\n\nexport default inputValidator;\n"]},"metadata":{},"sourceType":"module"}