{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Oleh Dzenhliuk\\\\Downloads\\\\form-forked\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Oleh Dzenhliuk\\\\Downloads\\\\form-forked\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\Oleh Dzenhliuk\\\\Downloads\\\\form-forked\\\\src\\\\components\\\\Form\\\\Main.js\";\nimport React, { useState } from \"react\";\nimport Field from \"./partials/Field\";\nimport Button from \"./partials/Button\";\nimport { submitBtn, editBtn, cancelBtn } from \"./Data\";\nimport generateId from \"../../helpers/idGenerator\";\nimport inputValidator from \"../../helpers/inputValidator\";\nimport \"./Main.css\";\nimport CheckBox from \"./partials/CheckBox\";\n\nvar Form = ({\n  title,\n  fields\n}) => {\n  var fieldsWithId = fields.map(field => _objectSpread(_objectSpread({}, field), {}, {\n    id: field.id ? field.id : generateId(field.label)\n  }));\n  var defaultValid = fieldsWithId.map(field => ({\n    id: field.id,\n    valid: true\n  }));\n\n  var _useState = useState(fieldsWithId),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var _useState3 = useState(defaultValid),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validation = _useState4[0],\n      setValidation = _useState4[1];\n\n  var checkData = () => {\n    return fields.filter(({\n      value\n    }) => value !== undefined && value !== \"\").length > 0;\n  };\n\n  var submitControl = checkData() ? editBtn : submitBtn;\n\n  var validateInputs = () => {\n    var valid = inputs.map(input => ({\n      id: input.id,\n      valid: inputValidator(input.value, input.type, input.required, input.min, input.max)\n    }));\n    setValidation(valid);\n    return valid.filter(item => item.valid !== true).length === 0;\n  };\n\n  var handleChange = event => {\n    var index = inputs.findIndex(element => element.id === event.target.id);\n    var newInputs = [...inputs];\n    var value = event.target.type === \"checkbox\" ? event.target.checked : event.target.value;\n    newInputs[index] = _objectSpread(_objectSpread({}, newInputs[index]), {}, {\n      value: value\n    });\n    setInputs(newInputs);\n  };\n\n  var handleClear = () => {\n    var newInputs = inputs.map(input => _objectSpread(_objectSpread({}, input), {}, {\n      value: \"\"\n    }));\n    setInputs(newInputs);\n  };\n\n  var handleSubmit = event => {\n    event.preventDefault();\n\n    if (validateInputs()) {\n      console.log(\"Sent data:\");\n      inputs.map(({\n        label,\n        value\n      }) => console.log(\"\".concat(label, \": \").concat(value)));\n      handleClear();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \" \", title, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, inputs.map(field => field.type === \"checkbox\" ? /*#__PURE__*/React.createElement(CheckBox, Object.assign({\n    key: field.label\n  }, field, {\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(Field, Object.assign({\n    key: field.label\n  }, field, {\n    handleChange: handleChange,\n    valid: validation[validation.findIndex(item => item.id === field.id)].valid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, Object.assign({}, cancelBtn, {\n    handleClick: handleClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, Object.assign({}, submitControl, {\n    handleClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }))));\n};\n\nForm.defaultProps = {\n  title: \"My Form\"\n};\nexport default React.memo(Form);","map":{"version":3,"sources":["C:/Users/Oleh Dzenhliuk/Downloads/form-forked/src/components/Form/Main.js"],"names":["React","useState","Field","Button","submitBtn","editBtn","cancelBtn","generateId","inputValidator","CheckBox","Form","title","fields","fieldsWithId","map","field","id","label","defaultValid","valid","inputs","setInputs","validation","setValidation","checkData","filter","value","undefined","length","submitControl","validateInputs","input","type","required","min","max","item","handleChange","event","index","findIndex","element","target","newInputs","checked","handleClear","handleSubmit","preventDefault","console","log","defaultProps","memo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Field from \"./partials/Field\";\r\nimport Button from \"./partials/Button\";\r\nimport { submitBtn, editBtn, cancelBtn } from \"./Data\";\r\nimport generateId from \"../../helpers/idGenerator\";\r\nimport inputValidator from \"../../helpers/inputValidator\";\r\n\r\nimport \"./Main.css\";\r\nimport CheckBox from \"./partials/CheckBox\";\r\n\r\nconst Form = ({ title, fields }) => {\r\n    const fieldsWithId = fields.map((field) => ({\r\n        ...field,\r\n        id: field.id ? field.id : generateId(field.label),\r\n    }));\r\n    const defaultValid = fieldsWithId.map(field => ({id: field.id, valid: true}));\r\n    const [inputs, setInputs] = useState(fieldsWithId);\r\n    const [validation, setValidation] = useState(defaultValid);\r\n    const checkData = () => {\r\n        return (\r\n            fields.filter(({ value }) => value !== undefined && value !== \"\")\r\n                .length > 0\r\n        );\r\n    };\r\n    const submitControl = checkData() ? editBtn : submitBtn;\r\n    const validateInputs = () => {\r\n      const valid = inputs.map(input => ({id: input.id, valid: inputValidator(input.value, input.type, input.required, input.min, input.max)}));\r\n      setValidation(valid);\r\n      return valid.filter(item => item.valid !== true).length === 0;\r\n    }\r\n    const handleChange = (event) => {\r\n        let index = inputs.findIndex(\r\n            (element) => element.id === event.target.id\r\n        );\r\n        let newInputs = [...inputs];\r\n        const value = event.target.type === \"checkbox\" ? event.target.checked : event.target.value;\r\n        newInputs[index] = { ...newInputs[index], value: value};\r\n        setInputs(newInputs);\r\n    };\r\n    const handleClear = () => {\r\n        let newInputs = inputs.map((input) => ({ ...input, value: \"\" }));\r\n        setInputs(newInputs);\r\n    };\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (validateInputs()) {\r\n          console.log(\"Sent data:\");\r\n          inputs.map(({ label, value }) => console.log(`${label}: ${value}`));\r\n          handleClear();\r\n        }\r\n    };\r\n    return (\r\n        <form className=\"form\">\r\n            <div className=\"form__header\">\r\n                <h2> {title} </h2>\r\n            </div>\r\n            <div className=\"form__content\">\r\n                {inputs.map((field) => (\r\n                    field.type === \"checkbox\" ?\r\n                    <CheckBox key={field.label} {...field} handleChange={handleChange}/> :\r\n                    <Field\r\n                        key={field.label}\r\n                        {...field}\r\n                        handleChange={handleChange}\r\n                        valid={validation[validation.findIndex(item => item.id === field.id)].valid}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div className=\"form__controls\">\r\n                <Button {...cancelBtn} handleClick={handleClear} />\r\n                <Button {...submitControl} handleClick={handleSubmit} />\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nForm.defaultProps = {\r\n    title: \"My Form\",\r\n};\r\n\r\nexport default React.memo(Form);\r\n"]},"metadata":{},"sourceType":"module"}